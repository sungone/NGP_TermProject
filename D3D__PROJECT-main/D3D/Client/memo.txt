	//WCHAR wchTxt[100];
	//swprintf_s(wchTxt, 100, L"look.x: %.2f, look.y: %.2f, look.z: %.2f, right.x: % .2f, right.y : % .2f, right.z : % .2f",
	//	_player->GetTransform()->GetLocalPosition().x,
	//	_player->GetTransform()->GetLocalPosition().y,
	//	_player->GetTransform()->GetLocalPosition().z,

	//	_player->GetTransform()->GetRight().x,
	//	_player->GetTransform()->GetRight().y,
	//	_player->GetTransform()->GetRight().z
	//);

	//SetWindowText(core->GetWindowHandle(), wchTxt);


		UINT rtvHeapIncrementsize =core->GetDevice()->GetDescriptorHandleIncrementSize(D3D12_DESCRIPTOR_HEAP_TYPE_RTV);
	UINT srvHeapIncrementsize = core->GetDevice()->GetDescriptorHandleIncrementSize(D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV);

	_DsvHeap = DSVHeap;
	_dsvHandle = _DsvHeap->GetCPUDescriptorHandleForHeapStart();

	_resources.resize(_count);

	D3D12_DESCRIPTOR_HEAP_DESC rtvHeapDesc = {};
	rtvHeapDesc.NumDescriptors = _count;
	rtvHeapDesc.Type = D3D12_DESCRIPTOR_HEAP_TYPE_RTV;
	rtvHeapDesc.Flags = D3D12_DESCRIPTOR_HEAP_FLAG_NONE;
	rtvHeapDesc.NodeMask = 0;

	ThrowIfFailed(core->GetDevice()->CreateDescriptorHeap(&rtvHeapDesc, IID_PPV_ARGS(&_RTVHeap)));

	D3D12_DESCRIPTOR_HEAP_DESC srvHeapDesc = {};
	srvHeapDesc.NumDescriptors = _count;
	srvHeapDesc.Type = D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV;
	srvHeapDesc.Flags = D3D12_DESCRIPTOR_HEAP_FLAG_NONE;  

	ThrowIfFailed(core->GetDevice()->CreateDescriptorHeap(&srvHeapDesc, IID_PPV_ARGS(&_SRVHeap)));

	D3D12_CPU_DESCRIPTOR_HANDLE rtvHeapBegin = _RTVHeap->GetCPUDescriptorHandleForHeapStart();
	D3D12_CPU_DESCRIPTOR_HANDLE srvHeapBegin = _SRVHeap->GetCPUDescriptorHandleForHeapStart();
	/*-------------------------------------------------------------------------------------------------------
										*리소스생성
	*-------------------------------------------------------------------------------------------------------*/

	//----------------------------------------Position 정보  -------------------------------------------------/ 
#pragma region
	{
		D3D12_RESOURCE_DESC desc = CD3DX12_RESOURCE_DESC::Tex2D(DXGI_FORMAT_R32G32B32A32_FLOAT, WINDOW_WIDTH, WINDOW_HEIGHT);
		desc.Flags = D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET;

		D3D12_RESOURCE_STATES resourceStates = D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_RENDER_TARGET;
		float arrFloat[4] = { 0, 0, 0, 0 };
		D3D12_CLEAR_VALUE optimizedClearValue = CD3DX12_CLEAR_VALUE(DXGI_FORMAT_R32G32B32A32_FLOAT, arrFloat);

		HRESULT hr = core->GetDevice()->CreateCommittedResource(
			&CD3DX12_HEAP_PROPERTIES(D3D12_HEAP_TYPE_DEFAULT),
			D3D12_HEAP_FLAG_NONE,
			&desc,
			resourceStates,
			&optimizedClearValue,
			IID_PPV_ARGS(&_resources[0]));

		assert(SUCCEEDED(hr));

		_rtvHandle[0] = CD3DX12_CPU_DESCRIPTOR_HANDLE(rtvHeapBegin, 0 * rtvHeapIncrementsize);
		core->GetDevice()->CreateRenderTargetView(_resources[0].Get(), nullptr, _rtvHandle[0]);
		
		D3D12_SHADER_RESOURCE_VIEW_DESC srvDesc = {};
		srvDesc.Shader4ComponentMapping = D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING;
		srvDesc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;
		srvDesc.ViewDimension = D3D12_SRV_DIMENSION_TEXTURE2D;
		srvDesc.Texture2D.MipLevels = 1;

		_srvHandle[0] = CD3DX12_CPU_DESCRIPTOR_HANDLE(srvHeapBegin, 0 * srvHeapIncrementsize);
		core->GetDevice()->CreateShaderResourceView(_resources[0].Get(), &srvDesc, _srvHandle[0]);
	}
#pragma endregion

	//----------------------------------------NorMal 정보  -------------------------------------------------// 
#pragma region
	{
		D3D12_RESOURCE_DESC desc = CD3DX12_RESOURCE_DESC::Tex2D(DXGI_FORMAT_R32G32B32A32_FLOAT, WINDOW_WIDTH, WINDOW_HEIGHT);
		desc.Flags = D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET;

		D3D12_RESOURCE_STATES resourceStates = D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_RENDER_TARGET;
		float arrFloat[4] = { 0, 0, 0, 0 };
		D3D12_CLEAR_VALUE optimizedClearValue = CD3DX12_CLEAR_VALUE(DXGI_FORMAT_R32G32B32A32_FLOAT, arrFloat);

		HRESULT hr = core->GetDevice()->CreateCommittedResource(
			&CD3DX12_HEAP_PROPERTIES(D3D12_HEAP_TYPE_DEFAULT),
			D3D12_HEAP_FLAG_NONE,
			&desc,
			resourceStates,
			&optimizedClearValue,
			IID_PPV_ARGS(&_resources[1]));

		assert(SUCCEEDED(hr));

		_rtvHandle[1] = CD3DX12_CPU_DESCRIPTOR_HANDLE(rtvHeapBegin, 1 * rtvHeapIncrementsize);
		core->GetDevice()->CreateRenderTargetView(_resources[1].Get(), nullptr, _rtvHandle[1]);

		D3D12_SHADER_RESOURCE_VIEW_DESC srvDesc = {};
		srvDesc.Shader4ComponentMapping = D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING;
		srvDesc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;
		srvDesc.ViewDimension = D3D12_SRV_DIMENSION_TEXTURE2D;
		srvDesc.Texture2D.MipLevels = 1;

		_srvHandle[1] = CD3DX12_CPU_DESCRIPTOR_HANDLE(srvHeapBegin, 1 * srvHeapIncrementsize);
		core->GetDevice()->CreateShaderResourceView(_resources[1].Get(), &srvDesc, _srvHandle[1]);
	}
#pragma endregion
	//----------------------------------------Diffuse 정보  -------------------------------------------------// 
#pragma region
	{
		D3D12_RESOURCE_DESC desc = CD3DX12_RESOURCE_DESC::Tex2D(DXGI_FORMAT_R8G8B8A8_UNORM, WINDOW_WIDTH, WINDOW_HEIGHT);
		desc.Flags = D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET;

		D3D12_RESOURCE_STATES resourceStates = D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_RENDER_TARGET;
		float arrFloat[4] = { 0, 0, 0, 0 };
		D3D12_CLEAR_VALUE optimizedClearValue = CD3DX12_CLEAR_VALUE(DXGI_FORMAT_R8G8B8A8_UNORM, arrFloat);

		HRESULT hr = core->GetDevice()->CreateCommittedResource(
			&CD3DX12_HEAP_PROPERTIES(D3D12_HEAP_TYPE_DEFAULT),
			D3D12_HEAP_FLAG_NONE,
			&desc,
			resourceStates,
			&optimizedClearValue,
			IID_PPV_ARGS(&_resources[2]));

		assert(SUCCEEDED(hr));

		_rtvHandle[2] = CD3DX12_CPU_DESCRIPTOR_HANDLE(rtvHeapBegin, 2 * rtvHeapIncrementsize);
		core->GetDevice()->CreateRenderTargetView(_resources[2].Get(), nullptr, _rtvHandle[2]);

		D3D12_SHADER_RESOURCE_VIEW_DESC srvDesc = {};
		srvDesc.Shader4ComponentMapping = D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING;
		srvDesc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;
		srvDesc.ViewDimension = D3D12_SRV_DIMENSION_TEXTURE2D;
		srvDesc.Texture2D.MipLevels = 1;

		_srvHandle[2] = CD3DX12_CPU_DESCRIPTOR_HANDLE(srvHeapBegin, 2 * srvHeapIncrementsize);
		core->GetDevice()->CreateShaderResourceView(_resources[2].Get(), &srvDesc, _srvHandle[2]);
	}
#pragma endregion


키정보:                                         
W :전진 , 
Z: 바운딩박스 ON/OFF
1: 디버기용 카메라
3: 3인칭 카메라
F9 : 풀스크린 ON/OFF
ESC :종료

교수님에게 드리고싶은말:
최대한 수업시간에 배운것을 많이 구현해보는것을 목표로 만들었습니다.














